/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import {
  BootstrapThemeColor,
  IBreadcrumbItem,
} from './common/index';
import {
  HostElement,
} from '@stencil/core';
import {
  VirtualNode,
} from './components/scb-list/scb-list-interfaces';

import {
  StencilComponent as CwcDropdown
} from './components/cwc-dropdown/cwc-dropdown';

declare global {
  interface HTMLCwcDropdownElement extends CwcDropdown, HTMLElement {
  }
  var HTMLCwcDropdownElement: {
    prototype: HTMLCwcDropdownElement;
    new (): HTMLCwcDropdownElement;
  };
  interface HTMLElementTagNameMap {
    "cwc-dropdown": HTMLCwcDropdownElement;
  }
  interface ElementTagNameMap {
    "cwc-dropdown": HTMLCwcDropdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "cwc-dropdown": JSXElements.CwcDropdownAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcDropdownAttributes extends HTMLAttributes {
      dropdownPlacement?: any;
      offsetString?: string;
      triggerOverflow?: boolean;
    }
  }
}


import {
  ScbAlert as ScbAlert
} from './components/scb-alert/scb-alert';

declare global {
  interface HTMLScbAlertElement extends ScbAlert, HTMLElement {
  }
  var HTMLScbAlertElement: {
    prototype: HTMLScbAlertElement;
    new (): HTMLScbAlertElement;
  };
  interface HTMLElementTagNameMap {
    "scb-alert": HTMLScbAlertElement;
  }
  interface ElementTagNameMap {
    "scb-alert": HTMLScbAlertElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "scb-alert": JSXElements.ScbAlertAttributes;
    }
  }
  namespace JSXElements {
    export interface ScbAlertAttributes extends HTMLAttributes {
      animatable?: boolean;
      dismissible?: boolean;
      onDismiss?: (hostEl: HostElement) => void;
      type?: BootstrapThemeColor;
    }
  }
}


import {
  ScbBadge as ScbBadge
} from './components/scb-badge/scb-badge';

declare global {
  interface HTMLScbBadgeElement extends ScbBadge, HTMLElement {
  }
  var HTMLScbBadgeElement: {
    prototype: HTMLScbBadgeElement;
    new (): HTMLScbBadgeElement;
  };
  interface HTMLElementTagNameMap {
    "scb-badge": HTMLScbBadgeElement;
  }
  interface ElementTagNameMap {
    "scb-badge": HTMLScbBadgeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "scb-badge": JSXElements.ScbBadgeAttributes;
    }
  }
  namespace JSXElements {
    export interface ScbBadgeAttributes extends HTMLAttributes {
      link?: string;
      pill?: boolean;
      type?: BootstrapThemeColor;
    }
  }
}


import {
  ScbBreadcrumb as ScbBreadcrumb
} from './components/scb-breadcrumb/scb-breadcrumb';

declare global {
  interface HTMLScbBreadcrumbElement extends ScbBreadcrumb, HTMLElement {
  }
  var HTMLScbBreadcrumbElement: {
    prototype: HTMLScbBreadcrumbElement;
    new (): HTMLScbBreadcrumbElement;
  };
  interface HTMLElementTagNameMap {
    "scb-breadcrumb": HTMLScbBreadcrumbElement;
  }
  interface ElementTagNameMap {
    "scb-breadcrumb": HTMLScbBreadcrumbElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "scb-breadcrumb": JSXElements.ScbBreadcrumbAttributes;
    }
  }
  namespace JSXElements {
    export interface ScbBreadcrumbAttributes extends HTMLAttributes {
      items?: IBreadcrumbItem[];
    }
  }
}


import {
  StencilComponent as ScbList
} from './components/scb-list/scb-list';

declare global {
  interface HTMLScbListElement extends ScbList, HTMLElement {
  }
  var HTMLScbListElement: {
    prototype: HTMLScbListElement;
    new (): HTMLScbListElement;
  };
  interface HTMLElementTagNameMap {
    "scb-list": HTMLScbListElement;
  }
  interface ElementTagNameMap {
    "scb-list": HTMLScbListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "scb-list": JSXElements.ScbListAttributes;
    }
  }
  namespace JSXElements {
    export interface ScbListAttributes extends HTMLAttributes {
      addClass?: string;
      addClassEven?: string;
      addClassFirst?: string;
      addClassLast?: string;
      addClassOdd?: string;
      bindToList?: boolean;
      bottomOffset?: number;
      debounce?: number;
      itemAs?: string;
      items?: object[];
      template?: VirtualNode;
      wrapperClass?: string;
    }
  }
}


import {
  AlertsPage as AlertsPage
} from './pages/alerts-page/alerts-page';

declare global {
  interface HTMLAlertsPageElement extends AlertsPage, HTMLElement {
  }
  var HTMLAlertsPageElement: {
    prototype: HTMLAlertsPageElement;
    new (): HTMLAlertsPageElement;
  };
  interface HTMLElementTagNameMap {
    "alerts-page": HTMLAlertsPageElement;
  }
  interface ElementTagNameMap {
    "alerts-page": HTMLAlertsPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "alerts-page": JSXElements.AlertsPageAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertsPageAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  BadgePage as BadgePage
} from './pages/badge-page/badge-page';

declare global {
  interface HTMLBadgePageElement extends BadgePage, HTMLElement {
  }
  var HTMLBadgePageElement: {
    prototype: HTMLBadgePageElement;
    new (): HTMLBadgePageElement;
  };
  interface HTMLElementTagNameMap {
    "badge-page": HTMLBadgePageElement;
  }
  interface ElementTagNameMap {
    "badge-page": HTMLBadgePageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "badge-page": JSXElements.BadgePageAttributes;
    }
  }
  namespace JSXElements {
    export interface BadgePageAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  BreadcrumbPage as BreadcrumbPage
} from './pages/breadcrumb-page/breadcrumb-page';

declare global {
  interface HTMLBreadcrumbPageElement extends BreadcrumbPage, HTMLElement {
  }
  var HTMLBreadcrumbPageElement: {
    prototype: HTMLBreadcrumbPageElement;
    new (): HTMLBreadcrumbPageElement;
  };
  interface HTMLElementTagNameMap {
    "breadcrumb-page": HTMLBreadcrumbPageElement;
  }
  interface ElementTagNameMap {
    "breadcrumb-page": HTMLBreadcrumbPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "breadcrumb-page": JSXElements.BreadcrumbPageAttributes;
    }
  }
  namespace JSXElements {
    export interface BreadcrumbPageAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  StencilComponent as DropdownPage
} from './pages/dropdown-page/dropdown-page';

declare global {
  interface HTMLDropdownPageElement extends DropdownPage, HTMLElement {
  }
  var HTMLDropdownPageElement: {
    prototype: HTMLDropdownPageElement;
    new (): HTMLDropdownPageElement;
  };
  interface HTMLElementTagNameMap {
    "dropdown-page": HTMLDropdownPageElement;
  }
  interface ElementTagNameMap {
    "dropdown-page": HTMLDropdownPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "dropdown-page": JSXElements.DropdownPageAttributes;
    }
  }
  namespace JSXElements {
    export interface DropdownPageAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  ListPage as ListPage
} from './pages/list-page/list-page';

declare global {
  interface HTMLListPageElement extends ListPage, HTMLElement {
  }
  var HTMLListPageElement: {
    prototype: HTMLListPageElement;
    new (): HTMLListPageElement;
  };
  interface HTMLElementTagNameMap {
    "list-page": HTMLListPageElement;
  }
  interface ElementTagNameMap {
    "list-page": HTMLListPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "list-page": JSXElements.ListPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ListPageAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  StencilBootstrapDemo as StencilBootstrapDemo
} from './pages/stencil-bootstrap-demo/stencil-bootstrap-demo';

declare global {
  interface HTMLStencilBootstrapDemoElement extends StencilBootstrapDemo, HTMLElement {
  }
  var HTMLStencilBootstrapDemoElement: {
    prototype: HTMLStencilBootstrapDemoElement;
    new (): HTMLStencilBootstrapDemoElement;
  };
  interface HTMLElementTagNameMap {
    "stencil-bootstrap-demo": HTMLStencilBootstrapDemoElement;
  }
  interface ElementTagNameMap {
    "stencil-bootstrap-demo": HTMLStencilBootstrapDemoElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "stencil-bootstrap-demo": JSXElements.StencilBootstrapDemoAttributes;
    }
  }
  namespace JSXElements {
    export interface StencilBootstrapDemoAttributes extends HTMLAttributes {
      
    }
  }
}

